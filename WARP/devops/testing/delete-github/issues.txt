Identify distinct workloads
Have clearly defined availability targets
Compute a composite SLA for your workload
Identify SLAs for 3rd party dependencies
Identify recovery targets for your workload
Decouple the lifecycle of the application from its dependencies
Perform a failure mode analysis
Use semantic logs and metrics
Monitor long-running workflows for failures
Measure and monitor key availability targets
Collect and store logs and key metrics of critical components
Correlate logs across workload tiers
Create a data restoration plan
Develop a plan for region/zone/network outages
Document regional failure plan
Create a backup strategy
Create a disaster recovery plan
Plan for dependent service outages
Use high availability offerings for platform services
Validate Availability Zones are in required regions
Operate your workload in multiple regions
Deploy to multiple availability zones
Detect and remediate faults through chaos engineering
Perform chaos testing by injecting faults
Test under expected peak load
Have redundant network connections to on-prem data sources
Simulate a failure path for cross premise connectivity
Manage load balancer connections to avoid port exhaustion
Load balance traffic across availability zones
Create application specific health probes
Implement load balancing
Plan for expected usage patterns
Automate key rotation
Backup keys and secrets in a geo-redudant way
Put operational procedures into place for if data size exceeds limits
Automate your tests
Automatically test your failover and failback process
Architect storage for resiliency
Distribute data geographically
Implement request timeouts
Implement retry logic to handle transient failures
Implement resiliency strategies in your workload
Archive application configuration and installation information
Decouple your application services
Store session state in an external data store
Avoid session state
Create health probes that validate data consistency
Implement application throttling
Segregate read operations from update operations
Configure emergency access accounts
Implement threat protection for the workload
Implement established processes and timelines to deploy mitigations for identified threats
Scan container workloads for vulnerabilities
Adopt a formal DevSecOps approach to building and maintaining software
Implement a branch policy strategy to enhance DevOps security
Adopt a zero trust approach
Establish a detection and response strategy for identity risks
Implement security strategy to contain attacker access
Restrict access to backend services to a minimal set of public IP addresses, only those who really need it
Protect all public endpoints with appropriate controls
Classify your data at rest and use encryption
Implement Conditional Access Policies
Adopt threat modeling processes
Establish a security operations center (SOC)
Ensure all Azure environments that connect to your production environment/network apply your organization‚Äôs policy and IT governance controls for security
Remove platform-specific information from HTTP headers, error messages, and web site content
Involve the security team in the development process
Use service endpoints and private links where appropriate
Use penetration testing and red team exercises to validate security defenses for this workload
Standardize on modern authentication protocols
Develop and implement a process to track, triage, and address threats into the application development lifecycle
Use Managed Identities for authentication to other Azure platform services
Define a set of Azure Policies which enforce organizational standards and are aligned with the governance team
Establish an incident response plan and perform periodically a simulated execution
Conduct periodic access reviews for the workload
Implement a solution to configure unique local admin credentials
Apply security controls to self-hosted build agents in the same manner as with other Azure IaaS VMs
Configure quality gate approvals in DevOps release process
Clearly define CI/CD roles and permissions
Review and consider elevated security capabilities for Azure workloads
Automatically remove/obfuscate personally identifiable information (PII) for this workload
Implement a landing zone concept with Azure Blueprints and Azure Policies
Establish lifecycle management policy for critical accounts
Periodically perform external and/or internal workload security audits
Follow DevOps security guidance and automation for securing applications
Discover and remediate common risks to improve Secure Score in Azure Security Center
Designate the parties responsible for specific functions in Azure
Integrate code scanning tools within CI/CD pipeline
Implement lifecycle management process for SSL/TLS certificates
Review, prioritize, and proactively apply security best practices to cloud resources
Develop a security plan
Use Azure Firewall or a 3rd party next-generation firewall to protect against data exfiltration
Use NSG or Azure Firewall to protect and control traffic within VNETs
Establish a unified enterprise segmentation strategy
Establish security benchmarking using Azure Security Benchmark to align with industry standards
Protect workload publishing methods and restrict those not in use
Implement just-in-time privileged access management
Mitigate DDoS attacks
Establish a designated group responsible for central network management
Evolve security beyond network controls
Prohibit direct internet access of virtual machines with policy, logging, and monitoring
Define an access model for keys and secrets
Build a security containment strategy
Deprecate legacy network security controls
Use only secure hash algorithms (SHA-2 family)
Define security requirements for the workload
Data in transit should be encrypted at all points to ensure data integrity
Use tools like Azure Disk Encryption, BitLocker or DM-Crypt to encrypt virtual disks
Store keys and secrets outside of application code in Azure Key Vault
Integrate network logs into a Security Information and Event Management (SIEM)
Establish a process for key management and automatic key rotation
Identify and classify business critical applications
Configure and collect network traffic logs
Use services available from a cloud provider for well-established functions like databases, encryption, identity directory, and authentication
Implement security playbooks for incident response
Develop a security training program
Regularly simulate attacks against critical accounts
Ensure security team has Security Reader or equivalent to support all cloud resources in their purview
Configure web apps to reuse authentication tokens securely and handle them like other credentials
Use standard and recommended encryption algorithms
Synchronize on-premises directory with Azure AD
Leverage a cloud application security broker (CASB)
Design virtual networks for growth
Add planning, testing, and validation rigor to the use of the root management group
Maintain a list of frameworks and libraries as part of the application inventory
Assign permissions based on management or resource groups
Implement automated deployment process with rollback/roll-forward capabilities
Implement identity-based storage access controls
Implement role-based access control for application infrastructure
Establish a SecOps team and monitor security related events
Provide guidance for either platform managed keys (PMK) or customer managed keys (CMK), based on security or compliance requirements of this workload
Continuously assess and monitor compliance
Make sure that all regulatory requirements are known and well understood
Make sure you understand the security features/capabilities available for each service and how they can be used in the solution
Identify technologies and frameworks used by the application
Update frameworks and libraries as part of the application lifecycle
Restrict application infrastructure access to CI/CD only
Use identity services instead of cryptographic keys when available
Establish a designated point of contact to receive Azure incident notifications from Microsoft
Enforce password-less or Multi-factor Authentication (MFA)
Use managed identity providers to authenticate to this workload
Establish process and tools to manage privileged access with just-in-time capabilities
Limit long-standing write access to production environments only to service principals
Implement resource locks to protect critical infrastructure
Implement defenses that detect and prevent commodity attacks
Define a process for aligning communication, investigation and hunting activities with the application team
Enforce naming conventions and resource tagging for all Azure resources
Use CDN to optimize delivery performance to users and obfuscate hosting platform from users/clients
Use RBAC to contol access to dashboards and data
Learn if there are any discounts available for the services already in use
Consider reserved capacity for Storage
Look for Public IPs and orphaned NICs
Understand the Azure services used and cost implications
Define a capacity model
Consider utilizing disk bursting
Separate data and log disks
Organize data into access tiers
Differentiate between production and non-production configuration
Enforce naming conventions and resource tagging for all Azure resources
Define performance requirements
Select the right operating system
Revisit new Azure services
Cleanup Storage regularly
Use Azure Advisor
Delete or deallocate unused resources in test environments
Collect logs and metrics from Azure resources
Shut down VM instances not in use
Consider the cost of data transfers and make sure cross-region peering is used efficiently
Use ACM or other cost management tools
Define a naming convention
Consider reserved instances
Define and monitor targets for scale operations
Design the workload to scale independently
Configure auto-scale policies for your workload (both in and out)
Understand the cost implications of multi-region deployment
Understand the operational capabilities of Azure services
Utilize the PaaS pay-as-you-go consumption model where relevant
Leverage the hybrid use benefit
Assign a budget and spend limit to the workload
Establish a cost owner for each service used by the workload
Use cost forecasting for budget alignment
Define end-date for each environment
Understand how the budget is defined
Review Azure Advisor recommendations periodically
Consider selective backups for VMs
Set up alerts for cost limits and thresholds
Define clear responsibilities for alerts
Understand cost implications of availability strategy
Understand the cost implications of Availability Zones
Choose appropriate region for workload deployments
Have ongoing conversation between app owner and business
Map application dependencies
The entire end-to-end CI/CD deployment process should be understood
Define critical system flows
Consider Platform as a service (PaaS) options
Associate cost to the criticality of the business
Explore where technical delivery capabilities reside
Monitor utilization of compute resources
Consider using reserved Premium disks
Consider using shared disks for suitable workloads
Define a clear price model for individual services
Consider using Service Endpoints and Private Link
Consider B-series VMs
Consider spot VMs
Pause AKS clusters
Use App Service Premium (v3) plan where possible
Consider additional DDoS protection
Prefer Microsoft backbone for networking
Understand cost implications of hub and spoke design
Use data lifecycle policy
Use cost modeling to identify opportunities for cost reduction
Set up a disaster recovery strategy that splits the application components and data into defined groups
Be aware of cross-region data transfer costs
Use developer SKUs for dev/test purposes
Consider the ratio of non-production to production environments
Consider multi-tenant or microservices scenarios when running multiple applications
Understand cloud-native features and implement where possible
Develop a plan to modernize the workload
Be aware of cost implications of Web Application Firewall
Consider VM Zone to Zone DR
Be aware of extra cost when tunnelling traffic through on-premises
Consider shared platforms
Use Managed Identities for authentication to other Azure platform services
Implement just-in-time privileged access management
Store keys and secrets outside of application code in Azure Key Vault
Test your failover and failback process
Implement procedures for key/secret rotation
Make sure that failed tests at least temporarily block deployments
Monitor the expiry of SSL certificates
Implement automated deployment process with rollback/roll-forward capabilities
Configure appropriate log levels for environments
Implement strategies for resiliency and self-healing
Understand the impact of dependencies
Define, monitor, and measure availability targets
Collect application level logs
Instrument your workload
Setup black-box monitoring to monitor the platform and customer experience
Analyze health data for your workload
Correlate application log events
Codify the process to provision and de-provision capacity
Use a log aggregation technology
Collect Azure activity logs in your aggregation tool
Gather logs in a structured format
Correlate resource-level logs
Use the health model to classify failover situations
Document critical manual processes
Automate recovery procedures
Enforce resource level monitoring
Create Azure Resource Health alerts
Enable Service Health alerts on your workload
Integrate Alerting into an existing systems
Send reliable alert notifications
Define standards, policies and best practices as code
Prioritize operational events
Define a process for alert reaction
Use automated alerting solution
Tailor dashboards to your needs
Implement tools to visualize application health
Analyze long-term trends to predict operational issues before they occur
Implement a health model
Correlate logs and metrics for critical internal dependencies
Instrument the workload to monitor customer experience
Make sure that operational shortcomings and failures are analyzed and used to improve and refine operational procedures
Define a hotfix process in case normal deployment procedures needs to be bypassed
Document all portions of the deployment that require manual intervention
Reduce the need for manual operations
Deploy your workload in an active-passive configuration
Use shared application and data services where appropriate
Use deployment strategies to deploy your workloads
Make sure that configuration settings can be changed or modified without rebuilding or redeploying the application
Use tools to govern services and configurations
Enable Key Vault Soft-Delete
Implement release gates
Define all infrastructure components as code 
Compare regional capacity requirements to availability
Monitor critical external dependencies
Make sure that specific methodologies are used to structure the deployment and operations process
Implement a process between dev and ops to resolve production issues
Perform business continuity drills
Test and validate manual operation runbooks
Consider storing application configuration in a dedicated management system like Azure App Configuration or Azure Key Vault
Understand the impact of changes in application health and capacity
Perform smoke tests
Track and address configuration drift
Perform security and penetration testing regularly
Make sure that critical test environments have 1:1 parity with productions
Automate infrastructure deployment process
Test for performance, scalability, and resiliency
Perform some tests in production
Perform integration testing
Use a systematic approach in your development and release process
Make sure that all tests are automated and carried out periodically
Deploy all infrastructure through an infrastructure-as-code process
Use Azure Resource Tags to enrich resources with operational meta-data
Use Platform as a Service offerings where appropriate
Use feature flags
Take advantage of multiple subscriptions where appropriate
Identify if there are components with more relaxed performance requirements
Monitor for new features and updates that can improve your workload
Determine and document what acceptable performance is
The health model can determine if a fault is transient
Choose the right database to match usage
Use microservices when possible
Identify sensible non-functional requirements
Monitor how long it takes to scale against your targets
Leverage autoscaling to scale in and out as load varies
Choose metrics appropriately for your scaling policies
Preemptively scale based on trends
Know how long it takes to respond to scaling events
Build a capacity model for your workload
Optimize your database queries
Learn how to use network capturing tools
Optimize your resource choices
Offload SSL traffic by using the gateway offloading pattern
Understand your performance bottlenecks around latency and throughput
Test and validate your defined latency and throughput targets
Consider using proximity placement groups for components that are very sensitive to network latency
Acquire dedicated networking resources as required
Design for eventual consistency
Evaluate service limits and quotas to ensure they can support future growth
Deploy to paired regions
Plan for the growth of your data over time
Monitor capacity utilization to forecast future growth
Identify human and environmental resources needed to create performance tests
Use appropriate performance testing tools
Define a testing strategy
Identify baseline performance targets and goals
Aggregate application and resource logs
Use critical system flows in the health model
Configure retention times for logs and metrics
Analyze long-term trends to predict performance issues
Use application profiling tools
Track how your resources scale
Monitor the components required to serve a single request
Determine the acceptable operational margin between peak utilization and maximum load
Determine appropriate metrics for your workload
Collect application logs from all environments with a tool like Azure Application Insights
Capture logs in a structured format
Correlate events across all tiers of your workload
Develop a troubleshooting guide for database performance problems
Develop a troubleshooting guide for high CPU or memory issues
Determine how to isolate increased response times
Have an overall monitoring strategy for scalability
Plan your growth, then choose regions that will support those plans
Use a Content Delivery Networks (CDN)
Establish targets for database performance
Have a large scale event management strategy in place
Implement database partitioning